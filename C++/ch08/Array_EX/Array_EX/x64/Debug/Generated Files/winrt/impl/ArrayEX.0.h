// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210806.1

#pragma once
#ifndef WINRT_ArrayEX_0_H
#define WINRT_ArrayEX_0_H
WINRT_EXPORT namespace winrt::ArrayEX
{
    struct Imain;
    struct main;
}
namespace winrt::impl
{
    template <> struct category<winrt::ArrayEX::Imain>{ using type = interface_category; };
    template <> struct category<winrt::ArrayEX::main>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::ArrayEX::main> = L"ArrayEX.main";
    template <> inline constexpr auto& name_v<winrt::ArrayEX::Imain> = L"ArrayEX.Imain";
    template <> inline constexpr guid guid_v<winrt::ArrayEX::Imain>{ 0xC19FBD63,0x91A2,0x5A33,{ 0x82,0xD5,0xC6,0x3C,0x61,0xA9,0x87,0x53 } }; // C19FBD63-91A2-5A33-82D5-C63C61A98753
    template <> struct default_interface<winrt::ArrayEX::main>{ using type = winrt::ArrayEX::Imain; };
    template <> struct abi<winrt::ArrayEX::Imain>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_ArrayEX_Imain
    {
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MyProperty() const;
        WINRT_IMPL_AUTO(void) MyProperty(int32_t value) const;
    };
    template <> struct consume<winrt::ArrayEX::Imain>
    {
        template <typename D> using type = consume_ArrayEX_Imain<D>;
    };
}
#endif
